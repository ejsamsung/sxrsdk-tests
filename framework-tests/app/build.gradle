apply plugin: 'com.android.application'

System.setProperty("appName", "sdktests")

if(file("../../../sxrsdk-demos/common.gradle").exists()) {
    apply from: '../../../sxrsdk-demos/common.gradle'
}


android {
    defaultConfig {
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                arguments.add('-DINCLUDE_DIR='+rootProject.projectDir.absolutePath)
                arguments.add('-DPATH_TO_LIBGVRF='+projectDir.absolutePath+'/build/intermediates/exploded-aar/framework-debug/jni/')
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    sourceSets.main {
        jni.srcDirs = [] // no auto generation of Android.mk
        jniLibs.srcDir 'jniLibs' // pre-compiled libraries
    }

    externalNativeBuild {
        cmake {
            path 'src/main/cpp/CMakeLists.txt'
        }
    }
}

dependencies {
    if (project.hasProperty("useLocalDependencies") && project.useLocalDependencies)
    {
        if (findProject(':widgetLib')) {
            implementation project(':widgetLib')
        } else {
            implementation(name: 'widgetLib-debug', ext: 'aar')
        }
    }
    else
    {
        implementation "com.samsungxr.widgetlib:widgetLib:$sxrVersion"
    }
    androidTestImplementation 'com.android.support:support-annotations:23.+'
    androidTestImplementation 'com.android.support.test:runner:0.4.1'
    androidTestImplementation 'com.android.support.test:rules:0.4.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:2.2.1'
    implementation 'net.jodah:concurrentunit:0.4.2'
    implementation project(path: ':sxr-unittestutils')
}

android.applicationVariants.all { variant ->
    if (variant.getBuildType().name == "debug") {
        task "configDevice${variant.name.capitalize()}" (type: Exec){
            dependsOn variant.install

            group = 'Device Configuration'
            description = 'Grants android permissions before running the application.'

            def adb = android.getAdbExe().toString()
            def permissions = [ 'android.permission.READ_EXTERNAL_STORAGE','android.permission.WRITE_EXTERNAL_STORAGE']
            for ( permission in permissions ) {
                commandLine "$adb shell pm grant ${variant.applicationId} $permission".split(' ')
            }
        }
        variant.testVariant.connectedInstrumentTest.dependsOn "configDevice${variant.name.capitalize()}"
    }
}
